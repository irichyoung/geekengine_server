// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Move

#ifndef PROTOBUF_Move__INCLUDED
#define PROTOBUF_Move__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Move();
void protobuf_AssignDesc_Move();
void protobuf_ShutdownFile_Move();

class Move;

// ===================================================================

class Move : public ::google::protobuf::Message {
 public:
  Move();
  virtual ~Move();

  Move(const Move& from);

  inline Move& operator=(const Move& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Move& default_instance();

  void Swap(Move* other);

  // implements Message ----------------------------------------------

  Move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Move& from);
  void MergeFrom(const Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Move)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_Move();
  friend void protobuf_AssignDesc_Move();
  friend void protobuf_ShutdownFile_Move();

  void InitAsDefaultInstance();
  static Move* default_instance_;
};
// ===================================================================


// ===================================================================

// Move

// required int64 id = 1;
inline bool Move::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Move::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Move::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Move::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Move::id() const {
  // @@protoc_insertion_point(field_get:Move.id)
  return id_;
}
inline void Move::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Move.id)
}

// required int32 x = 2;
inline bool Move::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Move::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Move::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Move::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Move::x() const {
  // @@protoc_insertion_point(field_get:Move.x)
  return x_;
}
inline void Move::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Move.x)
}

// required int32 y = 3;
inline bool Move::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Move::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Move::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Move::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Move::y() const {
  // @@protoc_insertion_point(field_get:Move.y)
  return y_;
}
inline void Move::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Move.y)
}

// required string name = 4;
inline bool Move::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Move::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Move::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Move::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Move::name() const {
  // @@protoc_insertion_point(field_get:Move.name)
  return *name_;
}
inline void Move::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Move.name)
}
inline void Move::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Move.name)
}
inline void Move::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Move.name)
}
inline ::std::string* Move::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Move.name)
  return name_;
}
inline ::std::string* Move::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Move::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Move.name)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Move__INCLUDED
